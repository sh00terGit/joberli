<?php
namespace Core\UserBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use FOS\UserBundle\Model\User as BaseUser;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;

/**
 * @ORM\Entity(repositoryClass="UserRepository")
 * @ORM\Table(name="User")
 */
class User extends BaseUser
{
    public function __construct()
    {
        parent::__construct();
        $this->userData = new ArrayCollection();
        $this->adFavorite = new ArrayCollection();
    }

    /**
     * @var integer
     *
     * @ORM\Id
     * @ORM\Column(name="id", type="integer", nullable=false)
     * @ORM\GeneratedValue(strategy="IDENTITY")
     */
    protected $id;

    /**
     * @ORM\ManyToMany(targetEntity="Core\AdBundle\Entity\Ad", mappedBy="userFavorite")
     */
    protected $adFavorite;

    /**
     * @var \DateTime $created
     *
     * @Gedmo\Timestampable(on="create")
     * @ORM\Column(type="datetime", name="Usr_Date_Create")
     */
    private $dateCreated;

    /**
     * @ORM\OneToOne(targetEntity="UserData", mappedBy="user")
     */
    protected $userData;

    public function getAvatarImg() {
        if (method_exists($this->getUserData(), 'getAvatar') and is_array($this->getUserData()->getAvatar())) {
            return $this->getUserData()->getAvatar()['path'];
        } else {
            return 'bundles/metronic/img/no-avatar.jpg';
        }
    }

    public function getCoverImg() {
        if (method_exists($this->getUserData(), 'getCover') and is_array($this->getUserData()->getCover())) {
            return $this->getUserData()->getCover()['path'];
        } else {
            return 'bundles/core/img/user-cover-pattern.jpg';
        }
    }

    /**
     * @return mixed
     */
    public function getUserData()
    {
        if ( ! $this->userData) {
            return new UserData();
        }
        return $this->userData;
    }

    /**
     * @return \DateTime
     */
    public function getDateCreated()
    {
        return $this->dateCreated;
    }

    /**
     * @param \DateTime $dateCreated
     */
    public function setDateCreated($dateCreated)
    {
        $this->dateCreated = $dateCreated;
    }

}